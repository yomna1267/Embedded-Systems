
seven_segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000001d4  00000248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000003d8  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000064e  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ed       	ldi	r30, 0xD4	; 212
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:

#define PINB *((volatile u8*)0x36)
#define PORTB *((u8*)0x38)
#define DDRB *((u8*)0x37)

int main(void){
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	61 97       	sbiw	r28, 0x11	; 17
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	char state[] = {
			0x3F, 0x06, 0x5B, 0x4F,0x66,
			0x6D, 0x7D, 0x07, 0x7F, 0x6F
	};
  96:	ce 01       	movw	r24, r28
  98:	03 96       	adiw	r24, 0x03	; 3
  9a:	9e 87       	std	Y+14, r25	; 0x0e
  9c:	8d 87       	std	Y+13, r24	; 0x0d
  9e:	e0 e6       	ldi	r30, 0x60	; 96
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	f8 8b       	std	Y+16, r31	; 0x10
  a4:	ef 87       	std	Y+15, r30	; 0x0f
  a6:	fa e0       	ldi	r31, 0x0A	; 10
  a8:	f9 8b       	std	Y+17, r31	; 0x11
  aa:	ef 85       	ldd	r30, Y+15	; 0x0f
  ac:	f8 89       	ldd	r31, Y+16	; 0x10
  ae:	00 80       	ld	r0, Z
  b0:	8f 85       	ldd	r24, Y+15	; 0x0f
  b2:	98 89       	ldd	r25, Y+16	; 0x10
  b4:	01 96       	adiw	r24, 0x01	; 1
  b6:	98 8b       	std	Y+16, r25	; 0x10
  b8:	8f 87       	std	Y+15, r24	; 0x0f
  ba:	ed 85       	ldd	r30, Y+13	; 0x0d
  bc:	fe 85       	ldd	r31, Y+14	; 0x0e
  be:	00 82       	st	Z, r0
  c0:	8d 85       	ldd	r24, Y+13	; 0x0d
  c2:	9e 85       	ldd	r25, Y+14	; 0x0e
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	9e 87       	std	Y+14, r25	; 0x0e
  c8:	8d 87       	std	Y+13, r24	; 0x0d
  ca:	99 89       	ldd	r25, Y+17	; 0x11
  cc:	91 50       	subi	r25, 0x01	; 1
  ce:	99 8b       	std	Y+17, r25	; 0x11
  d0:	e9 89       	ldd	r30, Y+17	; 0x11
  d2:	ee 23       	and	r30, r30
  d4:	51 f7       	brne	.-44     	; 0xaa <main+0x28>

	// Set switches as an input
	DDRA &= ~(1<<0);
  d6:	aa e3       	ldi	r26, 0x3A	; 58
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	ea e3       	ldi	r30, 0x3A	; 58
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	8e 7f       	andi	r24, 0xFE	; 254
  e2:	8c 93       	st	X, r24
	DDRA &= ~(1<<1);
  e4:	aa e3       	ldi	r26, 0x3A	; 58
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	ea e3       	ldi	r30, 0x3A	; 58
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	8d 7f       	andi	r24, 0xFD	; 253
  f0:	8c 93       	st	X, r24

	// Switches are pulled up
	PORTA |= (1<<0);
  f2:	ab e3       	ldi	r26, 0x3B	; 59
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	eb e3       	ldi	r30, 0x3B	; 59
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	8c 93       	st	X, r24
	PORTA |= (1<<1);
 100:	ab e3       	ldi	r26, 0x3B	; 59
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	eb e3       	ldi	r30, 0x3B	; 59
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	82 60       	ori	r24, 0x02	; 2
 10c:	8c 93       	st	X, r24

	// 7-segment as an output
	DDRB = 0xff;
 10e:	e7 e3       	ldi	r30, 0x37	; 55
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	80 83       	st	Z, r24

	// Display Zero
	PORTB = 0x3F;
 116:	e8 e3       	ldi	r30, 0x38	; 56
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	8f e3       	ldi	r24, 0x3F	; 63
 11c:	80 83       	st	Z, r24

	int counter = 0;
 11e:	1a 82       	std	Y+2, r1	; 0x02
 120:	19 82       	std	Y+1, r1	; 0x01
	while(1){
		if(((PINA>>0)&1) == 0){
 122:	e9 e3       	ldi	r30, 0x39	; 57
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	88 2f       	mov	r24, r24
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	81 70       	andi	r24, 0x01	; 1
 12e:	90 70       	andi	r25, 0x00	; 0
 130:	00 97       	sbiw	r24, 0x00	; 0
 132:	19 f5       	brne	.+70     	; 0x17a <main+0xf8>
			counter++;
 134:	89 81       	ldd	r24, Y+1	; 0x01
 136:	9a 81       	ldd	r25, Y+2	; 0x02
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	9a 83       	std	Y+2, r25	; 0x02
 13c:	89 83       	std	Y+1, r24	; 0x01
			if(counter > 9){
 13e:	89 81       	ldd	r24, Y+1	; 0x01
 140:	9a 81       	ldd	r25, Y+2	; 0x02
 142:	8a 30       	cpi	r24, 0x0A	; 10
 144:	91 05       	cpc	r25, r1
 146:	24 f0       	brlt	.+8      	; 0x150 <main+0xce>
				counter = 9;
 148:	89 e0       	ldi	r24, 0x09	; 9
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	9a 83       	std	Y+2, r25	; 0x02
 14e:	89 83       	std	Y+1, r24	; 0x01
			}
			PORTB = state[counter];
 150:	a8 e3       	ldi	r26, 0x38	; 56
 152:	b0 e0       	ldi	r27, 0x00	; 0
 154:	29 81       	ldd	r18, Y+1	; 0x01
 156:	3a 81       	ldd	r19, Y+2	; 0x02
 158:	ce 01       	movw	r24, r28
 15a:	03 96       	adiw	r24, 0x03	; 3
 15c:	fc 01       	movw	r30, r24
 15e:	e2 0f       	add	r30, r18
 160:	f3 1f       	adc	r31, r19
 162:	80 81       	ld	r24, Z
 164:	8c 93       	st	X, r24
			while(((PINA>>0)&1) == 0);
 166:	e9 e3       	ldi	r30, 0x39	; 57
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	88 2f       	mov	r24, r24
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	81 70       	andi	r24, 0x01	; 1
 172:	90 70       	andi	r25, 0x00	; 0
 174:	00 97       	sbiw	r24, 0x00	; 0
 176:	b9 f3       	breq	.-18     	; 0x166 <main+0xe4>
 178:	d4 cf       	rjmp	.-88     	; 0x122 <main+0xa0>
		}
		else if(((PINA>>1)&1) == 0){
 17a:	e9 e3       	ldi	r30, 0x39	; 57
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	86 95       	lsr	r24
 182:	88 2f       	mov	r24, r24
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	81 70       	andi	r24, 0x01	; 1
 188:	90 70       	andi	r25, 0x00	; 0
 18a:	00 97       	sbiw	r24, 0x00	; 0
 18c:	51 f6       	brne	.-108    	; 0x122 <main+0xa0>
			counter--;
 18e:	89 81       	ldd	r24, Y+1	; 0x01
 190:	9a 81       	ldd	r25, Y+2	; 0x02
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	9a 83       	std	Y+2, r25	; 0x02
 196:	89 83       	std	Y+1, r24	; 0x01
			if(counter < 0){
 198:	89 81       	ldd	r24, Y+1	; 0x01
 19a:	9a 81       	ldd	r25, Y+2	; 0x02
 19c:	99 23       	and	r25, r25
 19e:	14 f4       	brge	.+4      	; 0x1a4 <main+0x122>
				counter = 0;
 1a0:	1a 82       	std	Y+2, r1	; 0x02
 1a2:	19 82       	std	Y+1, r1	; 0x01
			}
			PORTB = state[counter];
 1a4:	a8 e3       	ldi	r26, 0x38	; 56
 1a6:	b0 e0       	ldi	r27, 0x00	; 0
 1a8:	29 81       	ldd	r18, Y+1	; 0x01
 1aa:	3a 81       	ldd	r19, Y+2	; 0x02
 1ac:	ce 01       	movw	r24, r28
 1ae:	03 96       	adiw	r24, 0x03	; 3
 1b0:	fc 01       	movw	r30, r24
 1b2:	e2 0f       	add	r30, r18
 1b4:	f3 1f       	adc	r31, r19
 1b6:	80 81       	ld	r24, Z
 1b8:	8c 93       	st	X, r24
			while(((PINA>>1)&1) == 0);
 1ba:	e9 e3       	ldi	r30, 0x39	; 57
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	86 95       	lsr	r24
 1c2:	88 2f       	mov	r24, r24
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	81 70       	andi	r24, 0x01	; 1
 1c8:	90 70       	andi	r25, 0x00	; 0
 1ca:	00 97       	sbiw	r24, 0x00	; 0
 1cc:	b1 f3       	breq	.-20     	; 0x1ba <main+0x138>
 1ce:	a9 cf       	rjmp	.-174    	; 0x122 <main+0xa0>

000001d0 <_exit>:
 1d0:	f8 94       	cli

000001d2 <__stop_program>:
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <__stop_program>
